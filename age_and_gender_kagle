{"cells":[{"cell_type":"code","source":["#!pip install tqdm\n","from tqdm import tqdm\n","import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","from PIL import Image\n","from keras.preprocessing.image import ImageDataGenerator"],"metadata":{"id":"oil4QmtL7xQ4","executionInfo":{"status":"ok","timestamp":1694255751393,"user_tz":-540,"elapsed":2820,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23374,"status":"ok","timestamp":1694255774760,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"sSp0ubBfBlam","outputId":"4d4016f6-8595-4ef6-ed55-d69c1877746a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":10,"status":"ok","timestamp":1694255774761,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"TvV8UwTLBb8T"},"outputs":[],"source":["BASE_DIR = '/content/drive/MyDrive/Dataset/kaggle/UTKFace'"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":814,"status":"ok","timestamp":1694255903109,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"CmRVnXN7Czks","outputId":"0e854baf-2d69-4328-831d-a995d22a478d"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 23666/23666 [00:00<00:00, 149643.91it/s]\n"]}],"source":["# labels - age, gender\n","image_paths = []\n","age_labels = []\n","gender_labels = []\n","\n","for filename in tqdm(os.listdir(BASE_DIR)):\n","    image_path = os.path.join(BASE_DIR, filename)\n","    #ages = img.split(\"_\")[0]\n","    #genders = img.split(\"_\")[1]\n","    temp = filename.split('_')\n","    age = int(temp[0])\n","    gender = int(temp[1])\n","    image_paths.append(image_path)\n","    age_labels.append(age)\n","    gender_labels.append(gender)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":47,"status":"aborted","timestamp":1694255895196,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"rf1G9UKTCz1I"},"outputs":[],"source":["# convert to dataframe\n","df = pd.DataFrame()\n","df['image'], df['age'], df['gender'] = image_paths, age_labels, gender_labels\n","df.head(23666)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":50,"status":"aborted","timestamp":1694255895200,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"tH_uxJ4bCz6p"},"outputs":[],"source":["# map labels for gender\n","gender_dict = {0:'Male', 1:'Female'}"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":49,"status":"aborted","timestamp":1694255895202,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"wTrzf6YaC0AS"},"outputs":[],"source":["from PIL import Image\n","img = Image.open(df['image'][22000])\n","plt.axis('off')\n","plt.imshow(img);"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":49,"status":"aborted","timestamp":1694255895203,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"ukZyB_qAGGKI"},"outputs":[],"source":["import seaborn as sns\n","sns.distplot(df['age'])"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":50,"status":"aborted","timestamp":1694255895205,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"Ytc3AL2jGGNh"},"outputs":[],"source":["#sns.countplot(df['gender'])\n","sns.countplot(x=df['gender'])"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":51,"status":"aborted","timestamp":1694255895207,"user":{"displayName":"Since Life","userId":"00290508719664628761"},"user_tz":-540},"id":"RCiLgUS_GGUH"},"outputs":[],"source":["# to display grid of images\n","#from keras.preprocessing import image\n","from tensorflow.keras.preprocessing.image import load_img\n","plt.figure(figsize=(20, 20))\n","files = df.iloc[0:25]\n","\n","for index, file, age, gender in files.itertuples():\n","    plt.subplot(5, 5, index+1)\n","    img = load_img(file)\n","    img = np.array(img)\n","    plt.imshow(img)\n","    plt.title(f\"Age: {age} Gender: {gender_dict[gender]}\")\n","    plt.axis('off')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lcP5wVQWGGZU","executionInfo":{"status":"aborted","timestamp":1694255895208,"user_tz":-540,"elapsed":52,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["def extract_features(images):\n","    features = []\n","    for image in tqdm(images):\n","        img = load_img(image, grayscale=True)\n","        img = img.resize((128, 128), Image.ANTIALIAS)\n","        img = np.array(img)\n","        features.append(img)\n","\n","    features = np.array(features)\n","    # ignore this step if using RGB\n","    features = features.reshape(len(features), 128, 128, 1)\n","    return features\n","X = extract_features(df['image'])\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tFpe-wrqKWR_","executionInfo":{"status":"aborted","timestamp":1694255895210,"user_tz":-540,"elapsed":53,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["X.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Q-hG7mSGGcz","executionInfo":{"status":"aborted","timestamp":1694255895211,"user_tz":-540,"elapsed":53,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["(23708, 128, 128, 1)\n","# normalize the images\n","X = X/255.0\n","y_gender = np.array(df['gender'])\n","y_age = np.array(df['age'])\n","input_shape = (128, 128, 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q5sxEFuXGGjC","executionInfo":{"status":"aborted","timestamp":1694255895213,"user_tz":-540,"elapsed":54,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["inputs = Input((input_shape))\n","# convolutional layers\n","conv_1 = Conv2D(32, kernel_size=(3, 3), activation='relu') (inputs)\n","maxp_1 = MaxPooling2D(pool_size=(2, 2)) (conv_1)\n","conv_2 = Conv2D(64, kernel_size=(3, 3), activation='relu') (maxp_1)\n","maxp_2 = MaxPooling2D(pool_size=(2, 2)) (conv_2)\n","conv_3 = Conv2D(128, kernel_size=(3, 3), activation='relu') (maxp_2)\n","maxp_3 = MaxPooling2D(pool_size=(2, 2)) (conv_3)\n","conv_4 = Conv2D(256, kernel_size=(3, 3), activation='relu') (maxp_3)\n","maxp_4 = MaxPooling2D(pool_size=(2, 2)) (conv_4)\n","\n","flatten = Flatten() (maxp_4)\n","# fully connected layers\n","dense_1 = Dense(256, activation='relu') (flatten)\n","dense_2 = Dense(256, activation='relu') (flatten)\n","dropout_1 = Dropout(0.3) (dense_1)\n","dropout_2 = Dropout(0.3) (dense_2)\n","output_1 = Dense(1, activation='sigmoid', name='gender_out') (dropout_1)\n","output_2 = Dense(1, activation='relu', name='age_out') (dropout_2)\n","model = Model(inputs=[inputs], outputs=[output_1, output_2])\n","\n","model.compile(loss=['binary_crossentropy', 'mae'], optimizer='adam', metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mb2tDaVRGGrJ","executionInfo":{"status":"aborted","timestamp":1694255895215,"user_tz":-540,"elapsed":55,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["# plot the model\n","from tensorflow.keras.utils import plot_model\n","plot_model(model)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ci1eJS_yGGxA","executionInfo":{"status":"aborted","timestamp":1694255895217,"user_tz":-540,"elapsed":57,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["# train model\n","history = model.fit(x=X, y=[y_gender, y_age], batch_size=32, epochs=120, validation_split=0.2)"]},{"cell_type":"markdown","source":[],"metadata":{"id":"twMKtax7zvmv"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ALmWZE-9C0IM","executionInfo":{"status":"aborted","timestamp":1694255895218,"user_tz":-540,"elapsed":57,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["image_index = 21069\n","print(\"Original Gender:\", gender_dict[y_gender[image_index]], \"Original Age:\", y_age[image_index])\n","# predict from model\n","pred = model.predict(X[image_index].reshape(1, 128, 128, 1))\n","pred_gender = gender_dict[round(pred[0][0][0])]\n","pred_age = round(pred[1][0][0])\n","print(\"Predicted Gender:\", pred_gender, \"Predicted Age:\", pred_age)\n","plt.axis('off')\n","plt.imshow(X[image_index].reshape(128, 128), cmap='gray');"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0s64j-ELX2cR","executionInfo":{"status":"aborted","timestamp":1694255895220,"user_tz":-540,"elapsed":59,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["image_index = 22000\n","print(\"Original Gender:\", gender_dict[y_gender[image_index]], \"Original Age:\", y_age[image_index])\n","# predict from model\n","pred = model.predict(X[image_index].reshape(1, 128, 128, 1))\n","pred_gender = gender_dict[round(pred[0][0][0])]\n","pred_age = round(pred[1][0][0])\n","print(\"Predicted Gender:\", pred_gender, \"Predicted Age:\", pred_age)\n","plt.axis('off')\n","plt.imshow(X[image_index].reshape(128, 128), cmap='gray');"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QuhhD0vsX23o","executionInfo":{"status":"aborted","timestamp":1694255895221,"user_tz":-540,"elapsed":59,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["# plot results for gender\n","acc = history.history['gender_out_accuracy']\n","val_acc = history.history['val_gender_out_accuracy']\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'b', label='Training Accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n","plt.title('Accuracy Graph')\n","plt.legend()\n","plt.figure()\n","\n","loss = history.history['gender_out_loss']\n","val_loss = history.history['val_gender_out_loss']\n","\n","plt.plot(epochs, loss, 'b', label='Training Loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation Loss')\n","plt.title('Loss Graph')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x_JqPuTsMxgl","executionInfo":{"status":"aborted","timestamp":1694255895223,"user_tz":-540,"elapsed":61,"user":{"displayName":"Since Life","userId":"00290508719664628761"}}},"outputs":[],"source":["# plot results for age\n","loss = history.history['age_out_loss']\n","val_loss = history.history['val_age_out_loss']\n","epochs = range(len(loss))\n","\n","plt.plot(epochs, loss, 'b', label='Training Loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation Loss')\n","plt.title('Loss Graph')\n","plt.legend()\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1CROGDaWdNIN5S6DxcMmp6YlV9EwJp_iS","authorship_tag":"ABX9TyNdLEz3QH360bhg+TGb35sV"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}